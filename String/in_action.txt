# String expressions, methods, and formatting

len('abc')
'abc' + 'def'
'Ni!' * 4

The len built-in function here returns the length of a string
(or any other object with a length)

Python lets you create arbitrarily sized strings; there's no need 
to predeclare anything in Python, including the sizes of data structures.

Notice that operator overloading is at work here already:
we're using the same + and * operators that perform addition 
and multiplication when using numbers.

* Python doesn't allow you to mix numbers and strings in + expressions:
'abc' + 9 raises an error instead of automatically converting 9 to a str.

Iterate and membership: for and in 

For substrings, "in" is much like the str.find() method covered later 
in this chapter, but it returns a Boolean result instead of the 
substring's position.

# Indexing and Slicing
Because strings are defined as ordered collections of characters, 
we can access their components by position.

In Python, characters in a string are fetched by indexing--
providing the numeric offset.

negative offset is added to the length of a string.
or You can also think of negative offsets as counting backward from the
end.

s[0], s[-2]
s[1:3], s[1:] s[:-1], s[:]

Probably the best way to think of slicing is that it is a type of 
"parsing" (analyzing structure), especially when applied to strings--
it allows us to extract an entire section(substring) in a single step.

*Slices can be used to extract columns of data, chop off leading and 
trailing text, and more. In fact, we'll explore slicing in the context
of text parsing later in this chapter.

The left offset is taken to be the lower bound(inclusive), and the right
is the upper bound (noninclusive). left bound default to 0 and the length
of the object 

s[:-1] fetches all but the last item.

Extended sliing (s[i:j:k]) accepts a step (or stride) k, which defaults
to + 1:
- Allows for skipping items and reversing order.

top-level copy: This is very useful for list.

index by offset
index by key: the operations look the same but have different interpre.

Extended slicing: The third limit and slice objects

>>> s = 'abcdefghijklmnop'
>>> s[1:10:2]
'bdfhj'
>>> s[::2]
'acegikmo'

>>> s = 'hello'
>>> s[::-1]
'olleh'

>>> s = 'abcdefg'
>>> s[5:1:-1]
'fedc'

We'll revisit three-limit slices again later in this book, in conjunction
with the for loop statement.

>>> 'spam'[1:3]
'pa'
>>> 'spam'[slice(1, 3)]
'pa'
>>> 'spam'[::-1]
'maps'
>>> 'spam'[slice(None, None, -1)]
'maps'

#File echo.py
import sys
print(sys.argv)

$ python3 echo.py -a -b -c
['echo.py', '-a', '-b', '-c']

sys.argv[1:]

get rid of new lines in text
line[:-1] but it is better with line.rstrip method.
line.strip()
line.lstrip()
line.rstrip()
