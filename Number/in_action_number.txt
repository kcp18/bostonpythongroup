# Numberic Object and expressions
- Variables are created when they are first assigned values
- Variables are replaced with their values when used in expressions
- Variables must be assigned before they can be used in expressions 
- Variables refer to objects and are never declared ahead of time.

>>> a = 3
>>> b = 4

>>> a + 1, a - 1
(4, 2)
>>> b * 3, b / 2
(12, 2.0)
>>> a % 2, b ** 2
(1, 16)
>>> 2 + 4.0, 2.0 ** b
(6.0, 16.0)

In practice, this means you have to initialize counters to zero before you can add to them, initialize lists to an empty list before you can append to them, and so on.

>>> b / 2 + a
5.0
>>> b / (2.0 + a)
0.8

>>> b / (2.0 + a) # Python <= 2.6: echoes give more or fewer digits
0.8

>>> print(b / (2.0 + a))  # But print rounds off digits
0.8

display issue
>>> num = 1 / 3.0
>>> num 		# Auto-echoes
0.3333333333333333	
>>> print(num)		# Print explicitly
0.3333333333333333
>>> '%e' % num		# String formatting expression
'3.333333e-01'
>>> '%4.2f' % num	# Alternative floating-point format
'0.33'
>>> '{0:4.2f}'.format(num) # String formatting method: Python 2.6, 3.0, and later
'0.33'

The last three of these expressions employ string formatting.

# str and repr Display Formats
Technically, the difference between default interactive echoes and print corresponds to the difference between the built-in repr and str functions:

>>> repr('spam') # Used by echoes: as-code form
"'spam'"
>>> str('spam') # Used by print: user-friendly form
'spam

Both of these convert arbitrary objects to their string representations:
repr (and the default interactive echo) produces results that look as though they were code
str (and the print operation) converts to a typically more user-friendly format if available

Some objects have both -- a str for general use, and a repr with extra details.

the str built-in function can also be the name of the string data type. In Python3 it may be called with an encoding name to decode a Unicode string from a byte string(e.g., str(b'xy', 'utf8')), and serves as an alternative to the bytes.decode method we met in Chapter 4. 
