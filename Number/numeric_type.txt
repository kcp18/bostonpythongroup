In Python, data takes the form of "objects" -- either built-in objects thta Python provides, or objects we create using Python tools and other languages such as C.

In fact, objects are the basis of every Python program you will ever write.

# Numeric Type Basics
They can be used to keep track of your bank balance, the distance to Mars, the number of visitors to your website, and just about any other numeric quantity.

Python's numeric toolbox includes:
  - Integer and floating-point objects
  - Complex number objects
  - Decimal: fixed-precision objects
  - Fraction: rational number objects
  - Sets: collections with numeric operations
  - Booleans: true and false
  - Build-in functions and modules: round, math, random, etc.
  - Expressions; unlimited integer precision; bitwise operations; hex, octal, and binary format
  - Third-party extensions: vectors, libraries, visualization, plotting, etc.

# Numeric Literals
- integers
- floating-point or floats

Numberic literals and constructors

1234, -24, 0, 999999999			Integers (unlimited size)
1.23, 1., 3.14e-10, 4E210, 4.0e+210	Floating-point numbers
0o177, 0x9ff, 0b101010			Octal, hex, and binary literals
3+4j, 3.0+4.0j, 3J			Complex number literals
set('spam'), {1, 2, 3, 4}		Sets:2.X and 3.X construction forms
Decimal('1.0'), Fraction(1, 3)		Decimal and fraction extension types
bool(X), True, False			Boolean type and constants

Integer and floating-point literals
  Integers are written as strings of decimal digits. Floating-point numbers have a decimal point and/or an optional signed exponent introduced by an "e" or "E" and followed by an optional sign. If you write a number with a decimal point or exponent, Python makes it a floating-point object and uses floating-point (not integer) math when the object is used in an expression. Floating-point numbers are implemented as C "doubles" in standard CPython, and therefore get as much precision as the C compiler used to build the Python interpreter gives to doubles.

Integer in Python 2.X: normal and long

Integers in Python 3.X: a single type
In Python 3, the normal and long integer types have been merged--there is only integer, 
which automatically supports the unlimited precision of Python 2's separate long integer type.

Hexadecimal, octal, and binary literals
  Integers may be coed in decimal (base 10), hexadecimal (base 16), octal (base 8), or binary (base 2). 

Hexadecimals start with a leading 0x or 0X, followed by a string of hexadecimal digits (0-9 and A-F). Hex digits may be coded in lower or uppercase.

Octal literals start with a leading 0o or 0O (zero and lower- or uppercase letter O), followed by a string of digits (0-7). 

Binary literals begin with a leading 0b or 0B, followed by binary digits (0-1).

Note that all of these literals produce integer objects in program code; they are just alternative syntaxes for specifying values. The built-in calls hex(I), oct(I), and bin(I) convert an integer to its representation string in these three bases, and int(str, base) converts a runtime string to an integer per a given base.

Complex Numbers

Coding other numeric types such as Decimals and Fractions and sets

# Built-in Numeric Tools
Expression operators
  +, -, *, /, >>, **, &, etc

Built-in mathematical functions
  pow, abs, round, int, hex, bin, etc.

Utility modules
  random, math, etc.

Floating-point numbers have an "as_integer_ratio" method that is useful for the fraction number type, and an "is_integer" method to test if the number is an integer.

Integers have various attributes, including a new "bit_length" method introduced in Python 3.1 that gives the number of bits necessary to represent the object's value.

Moreover, as part collection and part number, sets also support both methods and expressions.
